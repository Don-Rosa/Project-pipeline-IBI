
Dans l'ordre d'usage:

bwa index ref.fa

gatk CreateSequenceDictionary -R ref.fasta
			--> crée un fasta.dict
samtools faidx ref.fasta
			--> crée un fasta.fai




bwa mem ${genome_ref}.fsa -R '@RG\tID:${Run Accession}\tPL:ILLUMINA\tPI:0\tSM:${Run Accession}\tLB:1'  ${read1}.fastq.gz ${read2 (Si il existe)}.fastq.gz  > ${out}.sam
								--> Map des fastq au génome de reference
								--> -R ajoute les read group, ID = ${Run Accession} sm = ${Run Accession}

samtools view -H ${ficher}.sam | grep '^@RG'
samtools view -H ${ficher}.bam | grep '^@RG'
			--> Affiche les read group du fichier

samtools view -bt ${reference}.fsa ${fichier}.sam > ${fichier}.bam
								--> passe d'un .sam à un .bam



samtools sort -o ${fichier}_sorted.bam ${fichier}.bam
					--> Trie un .bam selon l'ordre génétique

samtools flagstat  ${ficher}.bam
				--> Extraits 2-3 informations intéressantes sur un .bam

gatk MarkDuplicatesSpark -I ${input}.bam -O {output}.bam -OBI

				--> marque les duplicats, pour ce que ça veut dire

bedtools genomecov -ibam ${fichier}.bam -bga > {output}
			--> indique la couverture de chaque région génétique
			--> le fichier bam doit être trié


gatk --java-options "-Xmx4g" HaplotypeCaller  -R ${reference}.fsa -I ${input}.bam -O ${output}.g.vcf.gz -ERC GVCF
				---> Fait un fichier GVCF, option ERC GVCF pour grouper dans un même bloc les variants

Exemple pour gatk GenotypeGVCFs
gatk --java-options "-Xmx4g" GenotypeGVCFs
-R S288C_reference_genome_R64-2-1_20150113/S288C_reference_sequence_R64-2-1_20150113_copie.fasta
-V levure/ERR2299966.g.vcf.gz
-O ERR2299966.vcf.gz

    gatk --java-options "-Xmx4g" GenomicsDBImport --genomicsdb-workspace-path "Destination/" -L 20 --sample-name-map names.csv

cut -f 1 sampleTitle_md5_fastq.tsv : Récup la première colonne du fichier md5
tail -n +2  "file" pour récup tout sauf la première ligne

gatk --java-options "-Xmx4g" GenotypeGVCFs -R "$fasta" -V gendb://"$dir/Database" -O "$dir/.vcf.gz"

Rscript Filtration.R "fichier"

egrep -v "^##" levure.vcf > levure_no_header.vcf
bcftools view --no-header levure.vcf > test_no_header.vcf

bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t%QD\t%FS\t%MQ\t%MQRankSum\t%ReadPosRankSum\t%SOR\t%DP\n' levure/levure_snp.vcf.gz > levure/levure_snp_filtres.txt


gatk SelectVariants -R $reference.fasta -V ${file}_indels_raw.vcf.gz --select-type-to-include SNP -O ${file}_raw.vcf.gz
gatk CountVariants -V levure/levure.vcf.gz


lim.QD = 21
lim.FS = 5
lim.MQ = 58
lim.MQRankSum = -0.5
lim.ReadPosRankSum = -0.5
lim.SOR = 1.3

gatk VariantFiltration -R S288C_reference_genome_R64-2-1_20150113/S288C_reference_sequence_R64-2-1_20150113_copie.fasta -V levure/levure_snp.vcf.gz -O levure/levure_snp_filtered.vcf.gz -filter "QD < 21.0 || FS > 5.0 || MQ < 58.0 || SOR > 1.3 || MQRankSum < -0.5 || MQRankSum > 0.5 || ReadPosRankSum < -0.5 || ReadPosRankSum > 0.5" --filter-name "6filtres"


ca donne un fichier VCF avec la colonne FILTER remplie
et ensuite vous pouveez selectonner les SNP qui passent les filtres :

vcftools --gzvcf ${file}.vcf.gz --remove-filtered-all --recode --stdout | gzip -c > ${file}_PASS.vcf.gz
